use serde::{Deserialize, Serialize};
use sqlx::{Error, FromRow, SqlitePool};
use std::sync::Arc;

/// Represents a sound in the database.
#[derive(Debug, Serialize, Deserialize, Clone, FromRow)]
pub struct Sound {
    /// The unique identifier of the sound, auto-generated by the database.
    pub id: Option<i64>,
    /// The name of the sound file.
    pub name: String,
    /// The file path of the sound.
    pub path: String,
}

/// Repository to manage sounds in the database.
pub struct SoundRepository {
    pool: Arc<SqlitePool>,
}

impl SoundRepository {
    /// Creates a new `SoundRepository` with the provided database connection pool.
    ///
    /// # Arguments
    ///
    /// * `pool` - The database connection pool to interact with the database.
    ///
    /// # Returns
    ///
    /// A new instance of `SoundRepository`.
    pub fn new(pool: Arc<SqlitePool>) -> Self {
        Self { pool }
    }

    /// Inserts a new sound into the database.
    ///
    /// # Arguments
    ///
    /// * `sound` - The sound to be inserted into the database.
    ///
    /// # Returns
    ///
    /// The auto-generated ID of the inserted sound.
    pub async fn insert(&self, sound: Sound) -> Result<i64, Error> {
        let result = sqlx::query("INSERT INTO sounds (name, path) VALUES (?, ?)")
            .bind(&sound.name)
            .bind(&sound.path)
            .execute(&*self.pool)
            .await?;
        Ok(result.last_insert_rowid())
    }

    /// Retrieves all sounds from the database.
    ///
    /// # Returns
    ///
    /// A vector of `Sound` objects representing all sounds stored in the database.
    pub async fn get_all(&self) -> Result<Vec<Sound>, Error> {
        let sounds = sqlx::query_as::<_, Sound>("SELECT id, name, path FROM sounds")
            .fetch_all(&*self.pool)
            .await?;
        Ok(sounds)
    }

    /// Deletes a sound by its ID.
    ///
    /// # Arguments
    ///
    /// * `id` - The ID of the sound to be deleted.
    ///
    /// # Returns
    ///
    /// A result indicating success or failure of the delete operation.
    pub async fn delete(&self, id: i64) -> Result<(), Error> {
        sqlx::query("DELETE FROM sounds WHERE id = ?")
            .bind(id)
            .execute(&*self.pool)
            .await?;
        Ok(())
    }
}
